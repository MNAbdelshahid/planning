{"ast":null,"code":"var _jsxFileName = \"/Users/michaelabdelshahid/Desktop/planning/src/App.js\";\nimport React from 'react';\nimport { Alert, Card, Form, Jumbotron, Button } from 'react-bootstrap';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.getRecipes(); //Kicks off initial list of recipes\n    };\n\n    this.search = () => {\n      this.getRecipes(this.state.searchValue); // When a user clicks 'search', re-send the request to the api, with search values\n    };\n\n    this.getRecipes = q => {\n      //Method to query the API\n      this.setState({\n        recipes: []\n      }); //Clears the recipe list\n\n      const apiKey = 'a6894f29755de2438c2b9fb553b2931d';\n      var searchUrl = `https://www.food2fork.com/api/search?key=${apiKey}`;\n\n      if (q) {\n        //if user has entered a search value, we add it to the request URL\n        searchUrl = `${searchUrl}&q=${q}`;\n      }\n\n      fetch(searchUrl) //Fetch returns a promise\n      .then(resp => {\n        if (resp.status !== 200) {\n          throw {\n            message: \"Could not perform search. Please try again.\"\n          };\n        }\n\n        return resp.json(); //We need to grab the JSON from the response\n      }).then(payload => {\n        const recipes = payload.recipes;\n        this.setState({\n          recipes\n        }); //Finally, we can add the found recipes to our list, triggering a re-render\n      }).catch(error => this.setState({\n        error\n      }));\n    };\n\n    this.state = {\n      recipes: [],\n      // Keeps track of our list of recipes\n      searchValue: '',\n      // Its a controlled form input\n      error: null // If we get an error from the API request, it gets put here\n\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"d-flex justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-sm-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"What's for Dinner?\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Use the search below to help you with dinner ideas based on what you already have in the kitchen.  Just enter a few ingredients, and get inspired!\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Ingredients\"), React.createElement(\"div\", {\n      className: \"form-inline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Form.Control, {\n      type: \"text\",\n      placeholder: \"comman, separated, list\",\n      onChange: e => this.setState({\n        searchValue: e.target.value\n      }),\n      value: this.state.searchValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: this.search,\n      variant: \"outline-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Search\"))))), React.createElement(\"div\", {\n      className: \"d-flex justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-sm-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, this.state.error && React.createElement(Alert, {\n      variant: \"danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, this.state.error.message), this.state.recipes.map((recipe, index) => {\n      return React.createElement(Card, {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(Card.Img, {\n        variant: \"top\",\n        src: recipe.image_url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), React.createElement(Card.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(Card.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, recipe.title), React.createElement(\"a\", {\n        href: recipe.source_url,\n        className: \"btn btn-outline-primary\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, recipe.publisher)));\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/michaelabdelshahid/Desktop/planning/src/App.js"],"names":["React","Alert","Card","Form","Jumbotron","Button","App","Component","constructor","props","componentDidMount","getRecipes","search","state","searchValue","q","setState","recipes","apiKey","searchUrl","fetch","then","resp","status","message","json","payload","catch","error","render","e","target","value","map","recipe","index","image_url","title","source_url","publisher"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Alert,\n  Card,\n  Form,\n  Jumbotron,\n  Button,\n} from 'react-bootstrap'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      recipes: [], // Keeps track of our list of recipes\n      searchValue: '', // Its a controlled form input\n      error: null // If we get an error from the API request, it gets put here\n    }\n  }\n\n  componentDidMount = () =>{\n    this.getRecipes() //Kicks off initial list of recipes\n  }\n\n  search = ()=>{\n    this.getRecipes(this.state.searchValue) // When a user clicks 'search', re-send the request to the api, with search values\n  }\n\n  getRecipes = (q)=>{ //Method to query the API\n    this.setState({ recipes: [] }) //Clears the recipe list\n    const apiKey='a6894f29755de2438c2b9fb553b2931d'\n    var searchUrl = `https://www.food2fork.com/api/search?key=${apiKey}`\n    if(q){ //if user has entered a search value, we add it to the request URL\n      searchUrl = `${searchUrl}&q=${q}`\n    }\n    fetch(searchUrl)  //Fetch returns a promise\n    .then((resp)=> {\n      if(resp.status !== 200){ throw({message: \"Could not perform search. Please try again.\"}) }\n      return resp.json() //We need to grab the JSON from the response\n    })\n    .then( (payload) => {\n      const{ recipes } = payload\n      this.setState({recipes}) //Finally, we can add the found recipes to our list, triggering a re-render\n    })\n    .catch((error) => this.setState({error}))\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <Jumbotron>\n          <div className=\"d-flex justify-content-center\">\n            <div className='col-sm-5'>\n              <h1>What's for Dinner?</h1>\n              <p>\n                Use the search below to help you with dinner ideas based on what you already have in the kitchen.  Just enter a few ingredients, and get inspired!\n              </p>\n              <hr/>\n              <h5>Ingredients</h5>\n              <div className='form-inline'>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"comman, separated, list\"\n                  onChange={(e)=> this.setState({searchValue: e.target.value})}\n                  value={this.state.searchValue}\n                />\n                <Button onClick={this.search} variant=\"outline-primary\">Search</Button>\n              </div>\n            </div>\n          </div>\n\n        </Jumbotron>\n        <div className=\"d-flex justify-content-center\">\n          <div className='col-sm-5'>\n            {this.state.error &&\n              <Alert variant=\"danger\">{this.state.error.message}</Alert>\n            }\n            {this.state.recipes.map((recipe, index)=>{\n              return(\n                <Card key={index}>\n                  <Card.Img variant=\"top\" src={recipe.image_url} />\n                  <Card.Body>\n                    <Card.Title>{recipe.title}</Card.Title>\n                    <a\n                      href={recipe.source_url}\n                      className='btn btn-outline-primary'\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      {recipe.publisher}\n                    </a>\n                  </Card.Body>\n                </Card>\n              )\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}